---
title: "OrthoCompass_Review"
author: "Corey Scholes"
affiliation: "EBM Analytics"
version: 1.0
type: "website"
number-sections: true
number-depth: 3
date: "2025-Jun-13"
date-modified: "2025-Jun-13"

bibliography: OCGov references.bib

editor:
  visual
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    
execute: 
  echo: false
  warning: false
  message: false
---

# Preamble

The following analysis is a report on the activity, quality and data contained in the OrthoCompass system in preparation for a pull to the PROPELLER Registry.

Analysis packages were loaded initially into the *R* environment.

```{r}
#| label: load-packages

if (!require("pacman")) install.packages("pacman")
pacman::p_load(# Load required packages
  "ggforce",
  "ggdag",
  "ggmap",
  "geosphere",
  "dplyr",
  "flextable",
  "litedown",
  "grateful",
  "modelsummary",
  "quantreg",
  "readr",
  "knitr",
  "cardx",
  "forcats",
  "gargle",
  "googledrive",
  "googlesheets4",
  "openxlsx2",
  "tidyverse",
  "tidymodels",
  "lubridate",
  "consort",
  "gtsummary",
  "survival",
  "ggplot2",
  "ggdist",
  "ggfortify",
  "mice",
  "marginaleffects",
  "naniar",
  "quantreg",
  "broom",
  "epoxy",
  "broom.helpers",
  "stringr"
  )
  
  
```

Access to the OrthoCompass datasets was pre-authorised.

```{r}
#| label: auth2
#| echo: false

options(
  gargle_oauth_cache = ".secrets",
  gargle_oauth_email = TRUE
)

googledrive::drive_auth(
  cache = ".secrets", 
  email = TRUE
  )
```

A function was generated to retrieve files using the *googledrive* package, to call on later in the analysis for processing data imports.

```{r}
#| label: folder
#| echo: false

base_folder_id1 <- "1MYdI-lecdwD0Bo94nmpjQ5lKcsEka778"




```

```{r}
get_specific_snapshot <- function(folder_name, base_folder_id = base_folder_id1) {
  tryCatch({
    # Check if the folder exists in the base directory
    folder <- googledrive::drive_ls(as_id(base_folder_id), pattern = paste0("^", folder_name, "$"))
    
    if(nrow(folder) == 0) {
      stop(paste("Folder", folder_name, "not found"))
    }
    
    # Find the snapshot file in the specified folder
    snapshot_file <- googledrive::drive_ls(
      folder$id, 
      pattern = "Registry data snapshot\\.xlsx$"
    )
    
    if(nrow(snapshot_file) == 0) {
      stop("No snapshot file found in specified folder")
    }
    
    # Return both pieces of information as a list
    return(list(
      snapshot = snapshot_file,
      folder_name = folder$name
    ))
    
  }, error = function(e) {
    stop(paste("Error finding specified snapshot:", e$message))
  })
}
```

Data was retrieved from live database tables. Source files were specified and stored as global variables to call on in further functions.

```{r}
#| label: live-table
#| echo: false

SheetIDs <- list(
DbSS = "https://docs.google.com/spreadsheets/d/1JcWbNLf9LM8mgrb-xk6Lsz2ybGVAWmjIBQ25sp6lddA/edit"
)

# Treatments Masterlist - Timestamp is > Registry Start date (gsuite)

```

```{r}
#| label: read-tables

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())



ComplicTable <- googlesheets4::read_sheet(
  ss = SheetIDs$DbSS,
  sheet = "Complications", 
  col_names = TRUE, 
  col_types = "cccTlnicicccccccccccccccccDccD"
  )

IntraCompTable <- googlesheets4::read_sheet(
  ss = SheetIDs$DbSS,
  sheet = "IntraComplications", 
  col_names = TRUE, 
  col_types = "cccTlnicicccccccccccccccciccccccccccccccccccccc"
  )


#To match to acctData
PatientTable <- googlesheets4::range_read(
  ss = SheetIDs$DbSS,
  sheet = "Patient", 
  range = "A5:N",
  col_names = FALSE, 
  col_types = "DcccDcccDcicci"
  )


Patient_Col <- c(
  "PatientCreationDate",
  "PatientID",
  "LastName",	
  "FirstName",	
  "DateOfBirth",	
  "Sex",	
  "RegistryStatus",	
  "RegistryStatusNotes",	
  "DateRegistryStatus",	
  "NotificationMethod",	
  "NoTreatmentRecords",	
  "Email",	
  "Phone",
  "TrueNoTreatments"
)

colnames(PatientTable) <- Patient_Col


```

A static registry snapshot was retrieved and formatted based on the fixed date of preparation of the snapshot (31-Mar-2025).

```{r}

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())

# To get a snapshot from a specific folder (e.g., "20230415")
specific_snapshot <- get_specific_snapshot("20250611")


```

```{r}

temp_file1 <- tempfile(fileext = ".xlsx")
drive_download(
  file = specific_snapshot$snapshot$id,
  path = temp_file1,
  overwrite = TRUE
)

# Correction to reset back to excel origin
DaysDiff <- as.numeric(as.duration(interval(ymd("1899-12-30"), ymd("1970-01-01"))),"days")


Snapshot <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Combined",
  colNames = TRUE,
  detectDates = TRUE
  ) |> mutate(
    PatientID = stringr::str_split_i(TreatmentID,"\\.",1),
     SurgicalTreatment = case_when(
       stringr::str_detect(str_to_lower(EBMAComment),"surgery recommended") &
       stringr::str_detect(str_to_lower(RegistryCohortName), "non", negate = TRUE) ~ "Surgery recommended",
       stringr::str_detect(str_to_lower(RegistryCohortName), "non", negate = TRUE) ~ "Surgical",
       stringr::str_detect(str_to_lower(RegistryCohortName), "non") ~ "Non-Surgical"
  )
  )|> unite(
  col = "CombID",
  sep = ".",
  c("PatientID","AffectedSide"),
  remove = FALSE
)




STROBEInput <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Strobe_Input",
  colNames = TRUE,
  detectDates = TRUE
  )

```

# Context

OrthoCompass is is a clinical support system embedded within the practices of two surgeons in South-East Queensland. It has been in operation since July 2024 and has multiple cohorts across hip, knee and lower limb pathology, excluding foot and ankle.

# Recruitment Flow by Region

Flowcharts as per STROBE [@Vandenbroucke2007] and RECORD [@Benchimol2015] guidelines were generated for treatments enrolled into the Registry. Followup was set to eligibility at 6months.

```{r}


STROBEFlow2 <- STROBEInput |> 
  # Filter out rows with missing TreatmentID
  dplyr::filter(
    !is.na(TreatmentID),
    str_detect(RegistryCohortName,"Non", negate = TRUE)
                ) |> dplyr::left_join(# Join with relevant columns from Snapshot
    Snapshot |> 
      dplyr::select(
        TreatmentID,
        CombID,
        EligibleAtPreop,
        EligibleAtx6months,
        SurgicalTreatment
      ) |> 
      # Convert all date columns to date format
      dplyr::mutate(
        across(contains("Date"), lubridate::ymd)
      ),
    # Explicitly specify join column
    by = "TreatmentID"
  ) |> dplyr::mutate(
    TreatmentStatus2 = if_else(
          TreatmentStatus == "No further followup" & is.na(DateTreatment),
          "Archived",
          TreatmentStatus
  )
  )

```

```{r}

CurrentDate <- as.character("20250611")

STROBEFlow3 <- STROBEFlow2 |> dplyr::mutate(
    exclusion1 = case_when(
    is.na(SurgicalTreatment) ~ "Not a surgical treatment",
    SurgicalTreatment == "Surgical" & stringr::str_detect(RegistryStatus,"Opt-out") ~ "Patient Opt-Out",
    SurgicalTreatment == "Surgical" & is.na(RegistryCohortName) ~ "No cohort",
    SurgicalTreatment == "Surgical" ~ NA_character_,
    .default = "Not a surgical treatment"
  ),
  followup = if_else(
    is.na(exclusion1),
    TreatmentID,
    NA_character_
  ),
  lost_followup = case_when(
    is.na(exclusion1) & TreatmentStatus2 == "Failed" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Procedure failure",
    is.na(exclusion1) & TreatmentStatus2 == "No further followup" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Patient Opt-out",
    is.na(exclusion1) & is.na(EligibleAtx6months) ~ "Not eligible for followup"
  ),
  mitt = if_else(
    !is.na(followup) & is.na(lost_followup),
    TreatmentID,
    NA_character_
)
) |> dplyr::rename(
  trialno = "TreatmentID",
  arm3 = "RegistryCohortName"
)

```

Identify most populated cohorts for visualisation

```{r}

STROBEReview <- STROBEFlow3 |> dplyr::filter(
  !(TreatmentStatus == "Archived")
) |> group_by(arm3) |> summarise(CohortCount = n()) |> arrange(desc(CohortCount))

```

```{r}
#| label: fig-strobe-cohort1
#| fig-cap: "Flowchart of extraction and followup of surgical sample from the Registry - 1"


STROBEPlot1 <- consort_plot(
  data = STROBEFlow3 |> dplyr::filter(
    arm3 == "KneeArthritisSurgical" | arm3 == "KneeMeniscusSurgical" | arm3 == "HipArthritisSurgical"| arm3 == "KneeTFInstabilitySurgical" 
  ),
 orders = c(
   trialno = "Population",
   exclusion1 = "Ineligible",
   trialno = "Baseline Analysis",
   arm3 = "Cohort",
   lost_followup = "Excluded",
   mitt = "Followup Analysis"
   ),
 side_box = c(
   "exclusion1",
   "lost_followup"
   ),
 allocation = "arm3",
 cex = 0.6
)

knitr::knit_print(STROBEPlot1)

```

Cumulative recruitment over time was plotted from Registry inception to the present.

```{r}
#| label: fig-progress
#| fig-cap: "Cumulative record creation within OC from inception to present"


RecordCount <- dplyr::summarise(
  STROBEFlow3 |>  dplyr::filter(
    !(TreatmentStatus == "Archived")
    ),
  Count = n(),
  .by = PatientCreationDate
) |> arrange(
  PatientCreationDate
) |> dplyr::mutate(
  CumulativeCount = cumsum(Count),
  PatientCreationNum = as.numeric(PatientCreationDate)
  ) |> filter(
    !(PatientCreationDate < ymd("20160701"))
   
  )

cumulative_plot <- ggplot(RecordCount, aes(x = PatientCreationDate, y = CumulativeCount)) +
  geom_line(color = "#2c3e50", linewidth = 1) +
  # Add the spline fit with confidence interval
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), 
              color = "#e74c3c", linewidth = 1.2, se = TRUE, fill = "#e74c3c", alpha = 0.2) +
  geom_point(color = "#3498db", size = 1) +
  # Add labels and title
  labs(
    title = "Cumulative Patient Count Over Time",
    x = "Date",
    y = "Cumulative Number of Patients",
    #caption = "Data source: STROBEFlow3"
  ) +
  # Improve the theme and formatting
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    axis.title = element_text(face = "bold"),
    panel.grid.minor = element_blank()
  )

# Print the plot
knitr::knit_print(cumulative_plot)


```

# Missingness and Compliance

## Baseline and Intraoperative

```{r}
#| label: fig-baseline-miss
#| fig-cap: "Missingness of baseline PROMs and intraoperative date by registry cohort"

gg_miss_fct(Snapshot |> dplyr::filter(
      EligibleAtPreop == "Yes" | EligibleAtIntraop == "Yes",
      SurgicalTreatment == "Surgical"
      ) |> dplyr::select(
        VR12PCS_Preop,
        Anaesthetic,
        #TreatmentProvider, 
        RegistryCohortName
        ), 
      RegistryCohortName
      )


```

Missingness for baseline PROMs (represented by VR12) and intraoperative data is captured in @fig-baseline-miss.

Overall, there are variable response rates for baseline scores across cohorts. This may reflect variable engagement during consultant clinics.

## Patient-reported Outcomes by TimePoint

```{r}
min_percent <- 10
max_percent <- 100  # Or another value that encompasses all your data
```

```{r}
#| label: fig-LEFS-miss
#| fig-cap: "Missingness of LEFS by Timepoint across all cohorts"

PROMLEFS <- Snapshot |> dplyr::select(
  TreatmentID,
  starts_with("LEFS"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename_with(
  ~gsub("LEFS_TotalScore","LEFSTotalScore",.x, fixed = TRUE)
) |> dplyr::rename(
  EligibleAt_Preop = "EligibleAtPreop"
  ) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","6months","12months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  Snapshot |> dplyr::select(
    TreatmentID,
    SurgicalTreatment,
    RegistryCohortName
  ),
  by = "TreatmentID"
)

gg_miss_fct(PROMLEFS |> dplyr::filter(
      !is.na(EligibleAt),
      SurgicalTreatment == "Surgical"
      ) |> dplyr::select(
        LEFSTotalScore,
        TimePoint
        ), 
      TimePoint
      ) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )


```

```{r}
#| label: fig-ka-miss
#| fig-cap: "Missingness of KOOS12 by Timepoint in the KneeArthritis cohort"

SnapshotKA <- Snapshot |> dplyr::filter(
  RegistryCohortName == "KneeArthritisSurgical"
  ) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMKA <- SnapshotKA |> dplyr::select(
  TreatmentID,
  starts_with("KOOS12Score"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","6months","12months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  SnapshotKA |> dplyr::select(
    TreatmentID,
    SurgicalTreatment
  ),
  by = "TreatmentID"
)



gg_miss_fct(PROMKA |> dplyr::select(KOOS12Score,TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

```{r}
#| label: fig-meniscus-miss
#| fig-cap: "Missingness of WOMET by Timepoint in the Meniscus Surgery cohort"


SnapshotKM <- Snapshot |> dplyr::filter(
  RegistryCohortName == "KneeMeniscusSurgical"
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMKM <- SnapshotKM |> dplyr::select(
  TreatmentID,
  starts_with("WOMETScore"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","6months","12months"), ordered = TRUE, exclude = NA),
  WOMETScore = as.numeric(WOMETScore)
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  SnapshotKM |> dplyr::select(
    TreatmentID,
    SurgicalTreatment,
    TreatmentType,
    TreatmentStatus
  ),
  by = "TreatmentID"
)



gg_miss_fct(PROMKM |> dplyr::select(WOMETScore, TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

```{r}
#| label: fig-ha-miss
#| fig-cap: "Missingness of HOOS12 by Timepoint in the Meniscus Surgery cohort"


SnapshotHA <- Snapshot |> dplyr::filter(
  RegistryCohortName == "HipArthritisSurgical"
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMHA <- SnapshotHA |> dplyr::select(
  TreatmentID,
  starts_with("HOOS12Score"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","6months","12months"), ordered = TRUE, exclude = NA),
  HOOS12Score = as.numeric(HOOS12Score)
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  SnapshotHA |> dplyr::select(
    TreatmentID,
    SurgicalTreatment,
    TreatmentType,
    TreatmentStatus
  ),
  by = "TreatmentID"
)



gg_miss_fct(PROMHA |> dplyr::select(HOOS12Score, TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

The cumulative results of the Registry illustrate difficulty in engaging patients beyond short term followup.

## Baseline by Year

```{r}
#| label: fig-lefs-missbase
#| fig-cap: "Missingness of Baseline LEFS by Month in the Knee Arthritis cohort"


PROMLEFS1 <- PROMLEFS |> left_join(
  STROBEFlow3 |> dplyr::select(
    trialno,
    DateTreatmentRecordCreation
  ) |> dplyr::mutate(
    CreationYear = lubridate::year(DateTreatmentRecordCreation),
    CreationMonth = lubridate::month(DateTreatmentRecordCreation)
    ),
  join_by(TreatmentID == trialno)
) |> dplyr::filter(
  TimePoint == "Preop"
  ) |> dplyr::select(
  CreationYear,
  LEFSTotalScore
)

gg_miss_fct(PROMLEFS1, CreationYear) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )

```

```         
```

# Cohort Analysis

The VR12 is a *general* health questionnaire that is presented to *all* patients enrolled in the registry.

```{r}
#| label: fig-vr12-cohort
#| fig-cap: "Summary of VR12 at baseline by cohort"

Snapshot <- dplyr::mutate(
  Snapshot,
  across(contains("Score"), ~as.numeric(.))
)

FigureVR12 <- Snapshot |> dplyr::filter(
  str_detect(RegistryCohortName,"Non", negate = TRUE)
  ) |> ggplot(aes(y = RegistryCohortName, x = VR12PCS_Preop)) +
  stat_halfeye()


knitr::knit_print(FigureVR12)

```

Between-cohort variability is observed for the Physical Component Score of the VR12, but not as pronounced for the Mental Component Score. Most notable is the high variation within all cohorts for both VR12 component scores.

```{r}
#| label: fig-lefs
#| fig-cap: "Summary of LEFS by Timepoint"

preop_position <- which(levels(PROMLEFS$TimePoint) == "Preop")

FigureLEFS <- PROMLEFS |> dplyr::filter(
 str_detect(RegistryCohortName,"Non", negate = TRUE),
  !is.na(LEFSTotalScore)
) |> ggplot(aes(y = LEFSTotalScore, x = TimePoint)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add appropriate scale colors "Surgery recommended" = "darkred"
  scale_fill_manual(values = c(
    "Surgical" = "steelblue", 
    "Non-Surgical" = "darkgray",
    "Surgery recommended" = "darkred"
    )
    ) +
  scale_color_manual(values = c(
    "Surgical" = "steelblue4", 
    "Non-Surgical" = "dimgray",
    "Surgery recommended" = "darkred"
    )
    ) +
  labs(
    y = "QDASHTotalScore",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank()
  ) + facet_wrap(
    ~RegistryCohortName, ncol = 2
  )

knitr::knit_print(FigureLEFS)
```

```{r}


PROMMODEM <-  Snapshot |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
) |> dplyr::select(
  starts_with("MODEMP"),
  starts_with("Eligible"),
  TreatmentID
)

PROMMODEM1 <- PROMMODEM |> dplyr::select(
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("6months"), ordered = TRUE, exclude = NA),
  across(starts_with("MODEMP"), ~ forcats::fct(
    .,
    levels = c(
    "Not applicable",
    "Definitely not",
    "Probably not",
    "Not sure",
    "Probably yes",
    "Definitely yes"
  ))
)
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  Snapshot |> dplyr::select(
    TreatmentID,
    SurgicalTreatment,
    RegistryCohortName
  ),
  by = "TreatmentID"
)

```

```{r}
#| label: fig-modemp1
#| fig-cap: "Satisfaction with symptom relief by Time Point and Cohort captured by post-operative MODEMs"

FigModemP1 <- ggplot(PROMMODEM1 |> dplyr::filter(!is.na(MODEMPQ1), SurgicalTreatment == "Surgical"), aes(x = TimePoint, fill = MODEMPQ1)) +
  geom_bar(position = "fill") +
  #facet_wrap(~ RegistryCohortName) +
  labs(#title = "",
       x = "Time Point",
       y = "Count",
       fill = "Outcome") +
  scale_fill_viridis_d(option = "viridis") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "bottom"
  )



knitr::knit_print(FigModemP1)
```

```{r}
#| label: fig-modempre1
#| fig-cap: "Expectations of symptom relief by Cohort and Treatment TYpe captured by pre-treatment MODEMs"

Snapshot1 <- Snapshot |> dplyr::mutate(
  MODEMQ1_Preop = forcats::fct(
    MODEMQ1_Preop,
    levels = c(
    "Not applicable",
    "Not at all likely",
    "Slightly likely",
    "Somewhat likely",
    "Very likely",
    "Extremely likely"
  ))
)

FigModem1Pre <- ggplot(Snapshot1 |> dplyr::filter(
  !is.na(MODEMQ1_Preop),
  SurgicalTreatment == "Surgical"
  ),
  aes(x = RegistryCohortName,
      fill = MODEMQ1_Preop)
  ) + 
  geom_bar(position = "fill") +
  scale_fill_viridis_d(option = "viridis") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "right"
  )


knitr::knit_print(FigModem1Pre)
```

```{r}
#| label: fig-modempre1B
#| fig-cap: "Expectations of symptom relief by Cohort and Treatment TYpe captured by pre-treatment MODEMs for non-surgical cases"

Snapshot1 <- Snapshot |> dplyr::mutate(
  MODEMQ1_Preop = forcats::fct(
    MODEMQ1_Preop,
    levels = c(
    "Not applicable",
    "Not at all likely",
    "Slightly likely",
    "Somewhat likely",
    "Very likely",
    "Extremely likely"
  ))
)

FigModem1PreB <- ggplot(Snapshot1 |> dplyr::filter(
  !is.na(MODEMQ1_Preop),
  SurgicalTreatment == "Non-Surgical"
  ),
  aes(x = RegistryCohortName,
      fill = MODEMQ1_Preop)
  ) + 
  geom_bar(position = "fill") +
  scale_fill_viridis_d(option = "viridis") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "right"
  )


knitr::knit_print(FigModem1PreB)

```

```{r}
#| label: fig-modemp3
#| fig-cap: "Satisfaction with sleep comfort by Time Point and Cohort captured by post-operative MODEMs"

FigModemP3 <- ggplot(PROMMODEM1 |> dplyr::filter(!is.na(MODEMPQ3), SurgicalTreatment == "Surgical"), aes(x = TimePoint, fill = MODEMPQ3)) +
  geom_bar(position = "fill") +
  labs(#title = "Satisfaction with sleep comfort by Time Point and Cohort",
       x = "Time Point",
       y = "Count",
       fill = "Outcome") +
  scale_fill_viridis_d(option = "viridis") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "right"
  )

knitr::knit_print(FigModemP3)
```

## Knee Arthritis

```{r}
#| label: tbl-rc-demographics
#| tbl-cap: "Summary of demographics in Knee Arthritis cohort"

TableKAdemo <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    str_detect(RegistryCohortName,"KneeArthritis")
  ) |> dplyr::select(
    TreatmentType,
    SurgicalTreatment,
    TreatmentStatus,
    DateInitialExamination,
    AgeAtInitialExam,
    Sex
  ),
  by = "SurgicalTreatment",
  missing = "no",
  statistic = list(
    DateInitialExamination ~ "{min} - {max}"
  )
)

knitr::knit_print(TableKAdemo)
```

```{r}
#| label: tbl-ka-intraop
#| tbl-cap: "Summary of intraoperative variables in Knee Arthritis cohort"

TableKAsurg <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    str_detect(RegistryCohortName,"KneeArthritis"),
    SurgicalTreatment == "Surgical"
  ) |> dplyr::select(
    Surgeon,
    ArthroplastyTreatmentKnee:BearingTypeKnee
  ),
  by = "Surgeon",
  missing = "no"
)

knitr::knit_print(TableKAsurg)


```

```{r}
#| label: fig-worc-rc
#| fig-cap: "Summary of WORC normalised by Timepoint"

preop_position <- which(levels(PROMRC$TimePoint) == "Preop")


PROMKA2 <- dplyr::mutate(
  PROMRC,
  across(contains("Norm"), ~as.numeric(.))
)
FigureWORC_overlay <- PROMKA2 |> dplyr::filter(
  !(is.na(SurgicalTreatment2))
) |> ggplot(aes(y = WORCNorm, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add the ellipse annotation
  ggforce::geom_ellipse(aes(x0 = preop_position, 
                  y0 = 70, 
                  a = 0.3, 
                  b = 5, 
                  angle = 0),
             color = "red", 
             size = 1.2,
             inherit.aes = FALSE) +
  annotate("text", 
           x = preop_position + 0.4, 
           y = 85,
           label = "High preop scores",
           color = "red",
           fontface = "bold",
           size = 3.5) +
  # Add appropriate scale colors
  scale_fill_manual(values = c("Surgical" = "steelblue", "Non-Surgical" = "darkgray", "Surgery recommended" = "darkred")) +
  scale_color_manual(values = c("Surgical" = "steelblue4", "Non-Surgical" = "dimgray", "Surgery recommended" = "darkred")) +
  labs(
    y = "WORC Normalised",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank()
  )

knitr::knit_print(FigureWORC_overlay)
```

```{r}
#| label: fig-worcq3-rc
#| fig-cap: "Summary of WORC Physical Q3 (weakness) by Timepoint"

FigureWORCQ3_overlay <- PROMRC |> dplyr::filter(
  !(is.na(SurgicalTreatment2))
) |> ggplot(aes(y = WORCPhysicalQ3, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add the ellipse annotation
  # ggforce::geom_ellipse(aes(x0 = preop_position, 
  #                 y0 = 70, 
  #                 a = 0.3, 
  #                 b = 5, 
  #                 angle = 0),
  #            color = "red", 
  #            size = 1.2,
  #            inherit.aes = FALSE) +
  # annotate("text", 
  #          x = preop_position + 0.4, 
  #          y = 85,
  #          label = "High preop scores",
  #          color = "red",
  #          fontface = "bold",
  #          size = 3.5) +
  # Add appropriate scale colors
  scale_fill_manual(values = c("Surgical" = "steelblue", "Non-Surgical" = "darkgray", "Surgery recommended" = "darkred")) +
  scale_color_manual(values = c("Surgical" = "steelblue4", "Non-Surgical" = "dimgray", "Surgery recommended" = "darkred")) +
  labs(
    y = "WORC Normalised",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank()
  )

knitr::knit_print(FigureWORCQ3_overlay)
```

Assessment of the *Knee Arthritis* cohort reveals that some patients enrolled in the cohort are scoring high on the KOOS JR preoperatively, intraoperative data requires backfilling and that there may be sufficient variation in surgical technique to warrant further investigation (e.g. patellar resurfacing, tourniquet use, soft tissue management).

## Hip Arthritis

```{r}
#| label: tbl-ghi-demographics
#| tbl-cap: "Summary of demographics in Hip Arthritis cohort"

TableHAdemo <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    str_detect(RegistryCohortName, "HipArthritis")
  ) |> dplyr::select(
    TreatmentType,
    SurgicalTreatment,
    TreatmentStatus,
    DateInitialExamination,
    AgeAtInitialExam,
    Sex,
    ComorbScore_Preop
  ),
  by = "SurgicalTreatment",
  missing = "no",
  statistic = list(
    DateInitialExamination ~ "{min} - {max}"
  )
)

knitr::knit_print(TableHAdemo)
```

```{r}
#| label: tbl-ghi-intraop
#| tbl-cap: "Summary of intraoperative variables in Rotator Cuff cohort"
#| eval: FALSE

TableGHIsurg <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    RegistryCohortName == "RotatorCuff",
    SurgicalTreatment2 == "Surgical"
  ) |> dplyr::select(
    LabralTear:RepairAugmentation
  ) |> mutate(
    across(contains("TearSize"), ~as.numeric(.))
  ),
  missing = "no"
)

knitr::knit_print(TableGHIsurg)


```

```{r}

GHIIntraop <- Snapshot |> filter(
  RegistryCohortName == "GlenohumeralInstability",
  SurgicalTreatment2 == "Surgical"
)  |> dplyr::select(
    LabralTear:RepairAugmentation
)

```

```{r}
#| label: fig-wosi-ghi
#| fig-cap: "Summary of WOSI normalised by Timepoint for primary presentations of Glenohumeral Instability"

preop_position <- which(levels(PROMGHI$TimePoint) == "Preop")

FigureWOSI <- PROMGHI |> dplyr::filter(
  !(is.na(SurgicalTreatment2)),
  TreatmentType == "Primary"
) |> ggplot(aes(y = WOSINorm, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add the ellipse annotation
  ggforce::geom_ellipse(
    data = data.frame(x0 = preop_position, y0 = 70, a = 0.3, b = 5, angle = 0),
    aes(x0 = x0, y0 = y0, a = a, b = b, angle = angle),
    color = "red", 
    size = 1.2,
    inherit.aes = FALSE
  ) +
  annotate("text", 
           x = preop_position + 0.4, 
           y = 85,
           label = "High preop scores",
           color = "red",
           fontface = "bold",
           size = 3.5) +
  # Add appropriate scale colors
  scale_fill_manual(values = c("Surgical" = "steelblue", "Non-Surgical" = "darkgray", "Surgery recommended" = "darkred")) +
  scale_color_manual(values = c("Surgical" = "steelblue4", "Non-Surgical" = "dimgray", "Surgery recommended" = "darkred")) +
  labs(
    y = "WOSI Normalised Score",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank()
  )


knitr::knit_print(FigureWOSI)

```

Overall, the *Glenohumeral Instability* cohort mean WOSI score does not reach the reported patient acceptable symptom state (\~ 80) on average at up to 2 years followup. Considering the missingness patterns in the data, this could be attributed to patients self-selecting into responding to PROMs.

# Interpretation

# Recommendations
